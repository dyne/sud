@code_type c .c
@comment_type // %s
@compiler literate/bin/lit -t sud.lit && gcc sud.c && rm a.out

@title Super User Do

@s Multi-user privilege escalation tool

This software aims to be a UNIX tool for generic secure usage when in
need of privilege escalation. It is designed to run SUID, with
"super-user powers" to execute things as root on the system it is
installed. As such, it is designed for security, leveraging all
possible measures to avoid vulnerabilities, including the reduction of
complexity in its own source-code.


The purpose of `sud` is to execute commands as root (super-user) or as
other users that are configured on the system. For the configuration
of authorized users it relies on their belonging to groups `wheel`,
`sud` or `sudo`, for info see `vigr(8)` or `setuid(2)`.

For more general instructions, start from the [homepage of
SUD](https://sud.dyne.org).

@s Code structure overview

The only source file is `sud.c`.

The overall structure of `sud.c` is simple:

--- sud.c
@{Header files of system dependencies}
#include "macros.h"
@{macros.h}
@{The main program}
---

@s Headers

We want to have as less requirements as possible, so this list should
be kept short and eventually include `#ifdef` directives for specific
platform targets.

--- Header files of system dependencies
#include <stdio.h>
#include <stddef.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
---

@s Macros, includes and exit codes

The `status` variable will tell the operating system if the run was successful or not, 
and `prog_name` is used in case thereâ€™s an error message to be printed.

--- macros.h

#define OK 0                  // status code for successful run
#define usage_error 1         // status code for command not found
#define cannot_open_conf 2    // status code for config file access error

#define ERR(fstr,...) { fprintf(stderr,fstr, ##__VA_ARGS__); fputc('\n',stderr); }
#define XXX(fstr,...) { fprintf(stderr,fstr, ##__VA_ARGS__); fputc('\n',stderr); }
#define ACT(fstr,...) { fprintf(stderr,fstr, ##__VA_ARGS__); fputc('\n',stderr); }

#define MAX_STRING 4096
#define MAX_FILE   1024*100
---

@s Main

Now we come to the general layout of the `main()` function.

--- The main program
int main(int argc, char **argv)
{
	int status = OK;    // exit status of command, initially OK
	char *prog_name = "sud";    // who we are
    prog_name = argv[0];
    @{Parse command-line options}
    @{Execute the command}
    @{Print any errors}
    return status;
}
---

---Parse command-line options
---

---Execute the command
---

---Print any errors
---


